require(data.table)
require(xgboost)
require(magrittr)
require(dplyr)
require(caret)
require(forecast)
require(gridExtra)
require(ggplot2)
require(mlogit)
require(nnet)
require(moments)
#pega as bases de dados
base60<-read.csv("C://Users//Usuario//Desktop//Rafael - Dissertação//treated_variables//Artigo André//longa//base 60.csv")
rownames(base60)<-base60[,1]
base60<-base60[,-1]

base5<-read.csv("C://Users//Usuario//Desktop//Rafael - Dissertação//treated_variables//Artigo André//longa//base 5.csv")
rownames(base5)<-base5[,1]
base5<-base5[,-c(1,2,3)]

base20<-read.csv("C://Users//Usuario//Desktop//Rafael - Dissertação//treated_variables//Artigo André//longa//base 20.csv")
rownames(base20)<-base20[,1]
base20<-base20[,-c(1,2,3)]



#tira as linhas que não é possível encontrar no 20 e no 5
index5<-match(rownames(base60),rownames(base5))
junta<-base60[!is.na(index5),]
index5<-match(rownames(junta),rownames(base5))
junta<-cbind(junta,base5[index5,])


index20<-match(rownames(junta),rownames(base20))
junta<-junta[!is.na(index20),]
index20<-match(rownames(junta),rownames(base20))

junta<-cbind(junta,base20[index20,])
dates<-rownames(junta)


#monta as matrizes a serem previstas
preco_futuro<-data.table(junta[,1])
signal<-data.table(junta[,2])
reg<-data.table(junta[,-c(1,2)])
rownames(signal)<-dates
rownames(junta)<-dates


colnames(reg)<-c(paste(colnames(base60[,-c(1,2)]),c(60),sep="."),paste(colnames(base60[,-c(1,2)]),c(5),sep="."),paste(colnames(base60[,-c(1,2)]),c(20),sep="."))

#descobre os dias e o número de dias disponíveis
#define o percentual inicial para previsão
train_perc<-0.8
#define a cada quantos porcento previsto reestimar o modelo
fore_perc<-0.01
dates<-unique(as.Date(rownames(junta)))
number_days<-length(dates)
num_train<-round(train_perc*number_days)
num_retrain<-round(fore_perc*number_days)
num_forecast<-number_days-num_train

#define o numero de dias para treinar
treinar<-350
#define a cada quantos dias retreinar
retreinar<-10
#verifica quantas janelas serão necessárias
janelas<-floor((length(dates)-treinar)/10)

index_train<-!is.na(match(as.Date(rownames(junta)),dates[1:num_train]))

for(i in 1:janelas){
  print(paste("loop",i))
  ##################################################
  ################Parte do LOGIT####################
  ##################################################
  
  print(paste("loop",i))
  #acha os dias desse loop
  index_train<-!is.na(match(as.Date(rownames(junta)),dates[(i*10-9):(treinar+i*10-10)]))
  index_test<-!is.na(match(as.Date(rownames(junta)),dates[(treinar+i*10-9):(treinar+i*10+1)]))
  
  train.reg<-as.matrix(reg[(index_train),])
  train.signal<-as.matrix(signal[index_train,]-1)
  
  valid.reg<-as.matrix(reg[index_test,])
  valid.signal<-as.matrix(signal[index_test,]-1)
  
  dtrain = xgb.DMatrix(data = train.reg, label = train.signal)
  
  numberOfClasses <- nrow(unique(train.signal))
  ##############################
  
  
  xgb_params <- list("objective" = "multi:softprob",
                     "eval_metric" = "mlogloss",
                     "num_class" = numberOfClasses)
  nround    <-500 # number of XGBoost rounds
  
  cv.nfold  <- 5
  #Fit cv.nfold * cv.nround XGB models and save OOF predictions
  cv_model <- xgb.cv(params = xgb_params,
                     data = dtrain, 
                     nrounds = nround,
                     nfold = cv.nfold,
                     verbose = TRUE,
                     prediction = TRUE)
  #
  
  
  cv<-(cv_model$evaluation_log$test_mlogloss_mean)
  min<-min(cv)
  dp<-cv_model$evaluation_log$test_mlogloss_std[which(min(cv)==cv)]
  best<-which.max(cv < (min+dp))
  
  
  
  #ggplot2::autoplot(as.ts(cbind(cv_model$evaluation_log$train_mlogloss_mean,cv_model$evaluation_log$test_mlogloss_mean)))
  
  
  
  ####
  # Modelo xgboost para classificação multinomial
  ####
  
  xgb_params <- list("objective" = "multi:softprob",
                     "eval_metric" = "mlogloss",
                     "num_class" = numberOfClasses)
  
  xgModel = xgb.train(params = xgb_params,
                      data = dtrain, 
                      nround = best,
                      verbose=TRUE)
  xgboost.predict <- predict(xgModel, valid.reg)
  
  
  test_prediction <- matrix(xgboost.predict, nrow = numberOfClasses,
                            ncol=length(xgboost.predict)/numberOfClasses) %>%
    t() %>%
    data.frame() %>%
    mutate(label = as.numeric(valid.signal) ,
           max_prob = max.col(., "last"))
  
  
  predicted.xgboost = test_prediction$max_prob -1
  
  reference = test_prediction$label
  
  price_before<-valid.reg[,"last.price"]
  
  price_after<-preco_futuro[index_test]
  colnames(price_after)<-"price_after"
  
  ##################################################
  ################Parte do LOGIT####################
  ##################################################
  
  #acha os dias desse loop
  index_train<-!is.na(match(as.Date(rownames(junta)),dates[(i*10-9):(treinar+i*10-10)]))
  index_test<-!is.na(match(as.Date(rownames(junta)),dates[(treinar+i*10-9):(treinar+i*10+1)]))
  
  train.reg<-as.matrix(reg[(index_train),])
  train.signal<-as.matrix(signal[index_train,]-1)
  train<-data.frame(cbind(train.reg,train.signal))
  
  valid.reg<-as.matrix(reg[index_test,])
  valid.signal<-as.matrix(signal[index_test,]-1)
  valid<-data.frame(cbind(valid.reg,valid.signal))
  
  valid<-valid[,qr(train)$pivot[1:qr(train)$rank]]
  train<-train[,qr(train)$pivot[1:qr(train)$rank]]
  
  colnames(train)<-c(colnames(train)[-ncol(train)],"direction")
  colnames(valid)<-c(colnames(valid)[-ncol(valid)],"direction")
  
  train$direction<-factor(train$direction)
  train$direction<-relevel(train$direction,ref="1")
  
  valid$direction<-factor(valid$direction)
  valid$direction<-relevel(valid$direction,ref="1")
  
  mymodel<-multinom(direction~.,train)
  predicted.logit<-as.matrix(predict(mymodel,valid))
  
  ##################################################
  ################Junta TUDO####################
  ##################################################
  
  juntou<-cbind(predicted.xgboost,predicted.logit,reference,price_before,price_after)
  rownames(juntou)<-rownames(signal)[index_test]
  if (exists("pred_ref")){
    pred_ref<-rbind(pred_ref,juntou)
  } else {
    pred_ref<-juntou
}
}

write.table(pred_ref,"C://Users//Usuario//Desktop//Rafael - Dissertação//treated_variables//Artigo André//longa//precos")

pred_ref<-read.table("C://Users//Usuario//Desktop//Rafael - Dissertação//treated_variables//Artigo André//longa//precos")


#Avalia XGBOOST
u = union(pred_ref$reference,pred_ref$predicted)
t = table(factor(pred_ref$predicted, sort(u)), factor(pred_ref$reference, sort(u)))
c <- confusionMatrix(t,mode="everything")
c$table
print(c)


#Avalia LOGIT
u = union(pred_ref$reference,pred_ref$predicted.logit)
t = table(factor(pred_ref$predicted.logit, sort(u)), factor(pred_ref$reference, sort(u)))
c <- confusionMatrix(t,mode="everything")
c$table
print(c)


diff<-data.frame(pred_ref$V1-pred_ref$price_before)

diff<-cbind(diff,0)


correta<-5
lote<-5000

diff[1,2]<-diff[1,1]*lote-correta

for(i in 2:nrow(diff)){
  if(pred_ref$predicted[i]==2){
    diff[i,2]<-diff[(i-1),2]+diff[i,1]*lote-correta
  } else if(pred_ref$predicted[i]==1) {
    diff[i,2]<-diff[(i-1),2]
  } else if(pred_ref$predicted[i]==0) {
    diff[i,2]<-diff[(i-1),2]-diff[i,1]*lote-correta
  }
}

pred_ref<-cbind(pred_ref,diff)

result<-pred_ref$predicted==pred_ref$reference
pred_ref<-cbind(pred_ref,result)


pred_ref$result[pred_ref$result=="TRUE"]<-"Acertou"
pred_ref$result[pred_ref$result=="FALSE"]<-"Errou"
group.colors <- c(Errou = "red", Acertou ="green")
colnames(pred_ref)<-c("predicted","reference","price_before","price_after","saldo_oper","caixa","result")


preco<-ggplot(pred_ref, aes(1:nrow(pred_ref),price_before,colour = result)) + geom_point() +
  scale_color_manual(values=group.colors)+  
  labs(colour = "Resultado", title="Preço do Ativo") + 
  xlab("Período") +
  ylab("Preço") 

saldo<-ggplot(pred_ref, aes(1:nrow(pred_ref),caixa,colour = result)) + geom_point() +
  scale_color_manual(values=group.colors)+  
  labs(colour = "Resultado", title="Caixa Zero") + 
  xlab("Período") +
  ylab("Preço") 


gridExtra::grid.arrange(saldo,preco,nrow=2, ncol=1)


ggplot(pred_ref,aes(x=saldo_oper,group=result,fill=result))+
  scale_color_manual(values=group.colors)+
  geom_histogram(position="dodge",binwidth=0.01)+theme_bw()


momentos<-cbind(all.moments(pred_ref$saldo_oper[pred_ref$result=="Acertou"],order.max=3,central=TRUE),
                all.moments(pred_ref$saldo_oper[pred_ref$result=="Errou"],order.max=3,central=TRUE))
colnames(momentos)<-c("Acertou","Errou")
